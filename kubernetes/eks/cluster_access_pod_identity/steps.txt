Set Up Access and Join Nodes on an EKS Cluster

Follow these steps to set up access, create a KUBECONFIG for kubectl, and join worker nodes to your EKS cluster.

Step 1: Create a KUBECONFIG for kubectl

Update the KUBECONFIG to use your EKS cluster:
   aws eks update-kubeconfig --region us-east-1 --name demo-eks

Step 2: Join the Worker Nodes
    1. Download the node authentication ConfigMap: 

   curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/cloudformation/2020-10-29/aws-auth-cm.yaml

    2. Edit the ConfigMap YAML to add the NodeInstanceRole obtained from Terraform: 

   vi aws-auth-cm.yaml

    3. Replace the placeholder text <ARN of instance role (not instance profile)> with the value of NodeInstanceRole from Terraform, then save and exit the editor. The ConfigMap should look like this: 

   apiVersion: v1
   kind: ConfigMap
   metadata:
     name: aws-auth
     namespace: kube-system
   data:
     mapRoles: |
       - rolearn: <ARN of instance role (not instance profile)> # <- EDIT THIS
         username: system:node:{{EC2PrivateDNSName}}
         groups:
           - system:bootstrappers
           - system:nodes

Step 3: Apply the Edited ConfigMap

    1. Apply the ConfigMap to join the nodes: 

   kubectl apply -f aws-auth-cm.yaml

    2. Wait for 2-3 minutes for the nodes to join the cluster. 

Step 4: Verify the Nodes

    1. Verify that the nodes have joined the cluster and are in the Ready state: 
   kubectl get nodes -o wide

You should see 3 worker nodes in the Ready state. Note that with EKS, you do not see the control plane nodes, as they are managed by AWS.
kubectl config view

kubectl get pods â€“all-namespaces


Create an IAM User and Access Key in AWS

Follow the steps below to create an IAM user named eks-user and generate an access key for this user. 

Step 1: Create an IAM User

Run the following command to create a new IAM user named iamuser-eksuser:

aws iam create-user --user-name iamuser-eksuser

Step 2: Create an Access Key for the IAM User

Generate an access key for the iamuser-eksuser and save the output to a JSON file for future reference:

aws iam create-access-key --user-name iamuser-eksuser | tee /tmp/create_output.json

Verify iamuser-eksuser Access

Step 1: Update aws-auth-cm.yaml to Map Users

    1. Open the aws-auth-cm.yaml file for editing. 

    2. Update the file to include the new user created with the previous AWS CLI commands: 

   apiVersion: v1
   kind: ConfigMap
   metadata:
     name: aws-auth
     namespace: kube-system
   data:
     mapRoles: |
       - rolearn: arn:aws:iam::891377054545:role/eks-demo-node
         username: system:node:{{EC2PrivateDNSName}}
         groups:
           - system:bootstrappers
           - system:nodes
# Add mapUsers as below (ARN can be get in the AWS CLI command result in the previous step):
     mapUsers: |
       - userarn: arn:aws:iam::891377054545:user/iamuser-eksuser
         username: iamuser-eksuser

    3. Apply the updated aws-auth-cm.yaml configuration: 

   kubectl apply -f aws-auth-cm.yaml

Step 2: Verify User Access

Verify the access rights of the new user using the following command:

   kubectl auth can-i get pod --as iamuser-eksuser



Add Role and RoleBinding for the User

Step 1: Create a role for the user:

cat <<EOF > user-role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: iamuser-eks-role
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]
EOF


kubectl create -f user-role.yaml

Step 2: Create a RoleBinding for the user:

cat <<EOF > user-role-binding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: iamuser-eks-binding
subjects:
- kind: User
  name: iamuser-eksuser
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: iamuser-eks-role
  apiGroup: rbac.authorization.k8s.io
EOF

kubectl create -f user-role-binding.yaml


Verify User Access Again

Verify the access rights of the user again using the following command:

   kubectl auth can-i get pod --as iamuser-eksuser
